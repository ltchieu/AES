#define _CRT_SECURE_NO_WARNINGS
#include "aes.h"


uint8_t inv_sBox[256] =
{
   0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
   0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
   0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
   0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
   0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
   0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
   0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
   0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
   0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
   0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
   0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
   0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
   0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
   0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
   0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
   0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};
uint8_t invMix_box[] = { 0x0e,0x0b,0x0d,0x09
						,0x09,0x0e,0x0b,0x0d
						,0x0d,0x09,0x0e,0x0b,
						0x0b,0x0d,0x09,0x0e };

// Mảng dung để nhân với state[] trong mix_columns
 uint8_t Mix_box[16] = {
			0x02, 0x03, 0x01, 0x01,
			0x01, 0x02, 0x03, 0x01,
			0x01, 0x01, 0x02, 0x03,
			0x03, 0x01, 0x01, 0x02
};

//s_box
 uint8_t s_box[256] = {
	// 0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, // 0
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, // 1
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, // 2
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, // 3
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, // 4
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, // 5
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, // 6
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, // 7
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, // 8
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, // 9
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, // a
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, // b
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, // c
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, // d
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, // e
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };// f


// Round constant
 uint8_t Rcon[11] = {
	0x00,0x01,0x02,0x04,0x08,
	0x10,0x20,0x40,0x80,
	0x1b,0x36
};
uint8_t state[16]; // Mang trang thai


			//Cai dat

	// Ham ma hoa
void aes_cipher(uint8_t Ptext[], uint8_t key[], uint8_t CipherText[]) 
{
	int r;

	for (int j = 0; j < 4; j++) {
		for (int i = 0; i < 4; i ++) {
			state[i + 4 * j ] = Ptext[j + 4 * i];
		}
	}

	AddAroundKey(key, state, 0);

	for (r = 1; r < 10; r++)
	{
		SubBytes(state);
		ShiftRows(state);
		MixColumns(state, Mix_box);
		AddAroundKey(key,state, r);
	}

	SubBytes(state);
	ShiftRows(state);
	AddAroundKey(key,state, 10);

	for (int j = 0; j < 4; j++) {
		for (int i = 0; i < 4; i++) {
			CipherText[i + 4 * j] = state[j + 4 * i];
		}
	}

}
void des_cipher(uint8_t Plaintext[], uint8_t w[], uint8_t CipherText[]) {

	for (int j = 0; j < 4; j++) {
		for (int i = 0; i < 4; i++) {
			state[i + 4 * j] = CipherText[j + 4 * i];
		}
	}

	int r;
	AddAroundKey(w, state, 10);

	for (r = 9; r >= 1; r--)
	{
		invShiftRows(state);
		invSubBytes(state);
		AddAroundKey(w, state, r);
		invMixColumns(state,invMix_box);
		
	}
	invShiftRows(state);
	invSubBytes(state);
	AddAroundKey(w, state, 0);

	for (int j = 0; j < 4; j++) {
		for (int i = 0; i < 4; i++) {
			Plaintext[i + 4 * j] = state[j + 4 * i];
		}
	}
}
		// ham addroundkey
void AddAroundKey(uint8_t Key[], uint8_t state[], int r) {
	
	uint8_t c;
	
	
	for (c = 0; c < 4; c++) {
		state[4 * 0 + c] = state[4 * 0 + c] ^ Key[4 * 4 * r + 4 * c + 0];
		state[4 * 1 + c] = state[4 * 1 + c] ^ Key[4 * 4 * r + 4 * c + 1];
		state[4 * 2 + c] = state[4 * 2 + c] ^ Key[4 * 4 * r + 4 * c + 2];
		state[4 * 3 + c] = state[4 * 3 + c] ^ Key[4 * 4 * r + 4 * c + 3];
	}
}


		//Ham SubBytes
void SubBytes(uint8_t state[]) {
	int i, c;
	uint8_t tmp;
		for (c = 0; c < 16; c++) {
			tmp = state[c];
			// Tra cứu giá trị tương ứng trong S-Box
			state[c] = s_box[tmp];
		}
}

		// Ham Shiftrows
void ShiftRow(uint8_t state[], int row, int shift) {
	for (int i = 0; i < shift; i++) {
		uint8_t temp = state[row * Nb];
		state[row * Nb] = state[row * Nb + 1];
		state[row * Nb + 1] = state[row * Nb + 2];
		state[row * Nb + 2] = state[row * Nb + 3];
		state[row * Nb + 3] = temp;
	}
}

void ShiftRows(uint8_t state[]) {

	ShiftRow(state, 1, 1);
	ShiftRow(state, 2, 2);
	ShiftRow(state, 3, 3);

}


	//Nhan voi {02} trong mang mix_box
int Nhan2(uint8_t value) {
	uint8_t result = value << 1; // Dich trai 1  bit
	if (value & 0x80) // Kiem tra xem bit MSB la 1 hay khong
		result ^= 0x1b; // XOR voi 0x1b de duoc ket qua trong truong GF(2^8)
	return result;
}

	//Nhan voi {03} trong mang mix_box
int Nhan3(uint8_t w) {
	return Nhan2(w) ^ w;
}


		// ham MixColumns
void MixColumns(uint8_t state[], uint8_t Mix_box[]) {
	uint8_t col[4], i, j, mul_res[4], res[16]; 
	int res_index = 0, chunk_size = 4;
	for (int j = 0; j < 4; j++) {

		for (int i = 0; i < 4; i++) { // Chuyen cac cot trong state vao mang col[]
			col[i] = state[4 * i + j];
		}
			
			//nhan mot cot trong state voi mang mix_box
		for (int h = 0; h < 16; h += chunk_size)
		{
			for (int k = 0; k < chunk_size; k++)
			{
				if (Mix_box[k+h] == 0x02)
				{
					mul_res[k] = Nhan2(col[k]);
				}
				else if (Mix_box[k+h] == 0x03)
				{
					mul_res[k] = Nhan3(col[k]);
				}
				else
				{
					mul_res[k] = col[k];
				}
			}
			res[res_index] = mul_res[0] ^ mul_res[1] ^ mul_res[2] ^ mul_res[3];
			res_index++;
		}
	}

		//Chuyen ket qua vao lai state
	res_index = 0;
	for (int l = 0; l <4; l++)
	{
		for (int n = 0; n < 4; n++)
		{
			state[res_index] = res[4*n + l];
			res_index++;
		}
	}
}

	//Ham rotword
uint8_t rot_word(uint8_t* w) {

	uint8_t tmp;
	uint8_t i;

	tmp = w[0];

	for (i = 0; i < 3; i++) {
		w[i] = w[i + 1];
	}

	w[3] = tmp;
	return tmp;
}

	//ham subword
 void sub_word(uint8_t w[], uint8_t s_box[]) {

	uint8_t i;

	for (i = 0; i < 4; i++) {
		w[i] = s_box[w[i]];
	}
}
	


					//Key schedule
void KeyExpansion(uint8_t* key, uint8_t* w, uint8_t *Rcon, uint8_t s_box[]) {

	uint8_t tmp[4];
	uint8_t i;
	uint8_t len = 4 * (10 + 1);

	
		
	for (i = 0; i < 4; i++) {
		w[4 * i + 0] = key[4 * i + 0];
		w[4 * i + 1] = key[4 * i + 1];
		w[4 * i + 2] = key[4 * i + 2];
		w[4 * i + 3] = key[4 * i + 3];
	}
	

	for (i = 4; i < len; i++) {
		tmp[0] = w[4*(i - 1) + 0];     
		tmp[1] = w[4*(i - 1) + 1];
		tmp[2] = w[4*(i - 1) + 2];
		tmp[3] = w[4*(i - 1) + 3];
		

		if (i % 4 == 0) {

			rot_word(tmp);
			sub_word(tmp,s_box);
			tmp[0]  =  tmp[0] ^ Rcon[i / 4];
		}
		

		w[4 * i + 0] = w[4 * (i - 4) + 0] ^ tmp[0];
		w[4 * i + 1] = w[4 * (i - 4) + 1] ^ tmp[1];
		w[4 * i + 2] = w[4 * (i - 4) + 2] ^ tmp[2];
		w[4 * i + 3] = w[4 * (i - 4) + 3] ^ tmp[3];
	}
}
int nhapMangThapLucPhan(uint8_t arr[]) {
	char hexStr[33];  // Chuỗi để lưu giá trị thập lục phân nhập vào, bao gồm 32 ký tự và ký tự kết thúc chuỗi '\0'

	// Đọc giá trị thập lục phân dưới dạng chuỗi
	scanf("%32s", hexStr);
	if (strlen(hexStr) != 32) {
		throw 101;
	}
	for (int i = 0; i < 16; i++) {
		// Chuyển đổi giá trị thập lục phân từ chuỗi sang số nguyên
		sscanf(hexStr + 2 * i, "%2hhx", &arr[i]);
	}

	return 0;
}

void invShiftRow(uint8_t state[], int row, int shift) {
	for (int i = 0; i < shift; i++) {
		uint8_t temp = state[row * Nb + 3];
		state[row * Nb + 3] = state[row * Nb + 2];
		state[row * Nb + 2] = state[row * Nb + 1];
		state[row * Nb + 1] = state[row * Nb];
		state[row * Nb] = temp;
	}
}

void invShiftRows(uint8_t state[]) {
	
	invShiftRow(state, 1, 1);
	invShiftRow(state, 2, 2);
	invShiftRow(state, 3, 3);

	
}
void invSubBytes(uint8_t state[]) {
	for (int i = 0; i < 16; i++) {
		uint8_t temp = state[i];
		state[i] = inv_sBox[temp];
		
	}

}
void invMixColumns(uint8_t state[],uint8_t invMix_box[]) {
	int index = 0;
	int  res_index, chunk_size = 4;
	uint8_t res[4] , i, j ,col[4], result[16];

	for (int i = 0; i < 4; i++) {         // Dua vao mang col[] de tien tinh toan
		for (int j = 0; j < 4; j++) {
			col[j] = state[4 * j + i];
		}

		for (int k = 0; k < 16; k+=chunk_size) {
			for (int m = 0; m < 4; m++) {
				uint8_t tmp = Nhan2(col[m]);
				uint8_t tmp1 = Nhan2(tmp);

				if (invMix_box[m+k] == 0x0e) {
					
					res[m] =  Nhan2(tmp1) ^ tmp1 ^ tmp;

				}
				else if (invMix_box[m+k] == 0x0b) {
					
					res[m] = Nhan2(tmp1) ^ tmp ^col[m];
				}
				else if (invMix_box[m+k] == 0x0d) {
					
		 			res[m] = Nhan2(tmp1) ^ tmp1 ^ col[m];
				}
				else {
					
					res[m] = Nhan2(tmp1) ^ col[m];

				}
				
			}
			result[index] = res[0] ^ res[1] ^ res[2] ^ res[3];
			index++;
		}
	}
	res_index = 0;
	for (int l = 0; l < 4; l++)
	{
		for (int n = 0; n < 4; n++)
		{
			state[res_index] = result[4 * n + l];
			res_index++;
		}
	}
	
}
