#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdint.h>
#include<conio.h>
#define MAXCol 100

// khai bao ham

void AddAroundKey(uint8_t Ptext[], uint8_t Key[], uint8_t Result[]);
void SubBytes(uint8_t Result[], const int Nb, uint8_t s_box[]);
void ShiftRows(uint8_t Result[], const int Nb);
void array_to_matrix(uint8_t Result[], int rows, int cols, uint8_t matrix[][MAXCol]);
void ShiftRows(uint8_t Result[]);
void ShiftRow(uint8_t Result[], int Nb, int row, int shift);
void MixColumns(uint8_t Result[]);
int Nhan2(uint8_t w);
int Nhan3(uint8_t w);
void MixColumns(uint8_t Result[], uint8_t Mix_box[]);

void main() {
	uint8_t key[] = {
0x2b, 0x28, 0xab, 0x09,
0x7e, 0xae, 0xf7, 0xcf,
0x15, 0xd2, 0x15, 0x4f,
0x16, 0xa6, 0x88, 0x3c };

	uint8_t Ptext[] = {
		0x32, 0x88, 0x31, 0xe0,
		0x43, 0x5a, 0x31, 0x8d37,
		0xf6, 0x30, 0x98, 0x07,
		0xa8, 0x8d, 0xa2, 0x34 };

	uint8_t s_box[256] = {
		// 0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f
		0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, // 0
		0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, // 1
		0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, // 2
		0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, // 3
		0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, // 4
		0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, // 5
		0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, // 6
		0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, // 7
		0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, // 8
		0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, // 9
		0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, // a
		0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, // b
		0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, // c
		0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, // d
		0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, // e
		0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };// f
	uint8_t Mix_box[16] = {
			0x02, 0x03, 0x01, 0x01,
			0x01, 0x02, 0x03, 0x01,
			0x01, 0x01, 0x02, 0x03,
			0x03, 0x01, 0x01, 0x02
	};


	uint8_t Result[20];
	int Nb = 4;
	uint8_t matrix[100][100];
	AddAroundKey(Ptext, key, Result);
	array_to_matrix(Result, 4, 4, matrix);
	SubBytes(Result, Nb, s_box);
	array_to_matrix(Result, 4, 4, matrix);
	ShiftRows(Result);
	printf("\n===============================================\n");
	MixColumns(Result, Mix_box);
}


//Cai dat

void array_to_matrix(uint8_t Result[], int rows, int cols, uint8_t matrix[][MAXCol]) {
	int i, j;

	for (i = 0; i < rows; i++) {
		for (j = 0; j < cols; j++) {
			matrix[i][j] = Result[i * cols + j];
			printf("%x ", matrix[i][j]);
		}
		printf("\n");
	}
}

void AddAroundKey(uint8_t Ptext[], uint8_t Key[], uint8_t Result[]){
	for (int i = 0; i < 16; i++)
	{
		Result[i] = Ptext[i] ^ Key[i];
	}
}

void SubBytes(uint8_t Result[], const int Nb, uint8_t s_box[]) {
	int i, c;
	uint8_t tmp;
		for (c = 0; c < 16; c++) {
			tmp = Result[c];
			// Tra cứu giá trị tương ứng trong S-Box
			Result[c] = s_box[tmp];
		}
}
void ShiftRow(uint8_t Result[], int Nb, int row, int shift) {
	for (int i = 0; i < shift; i++) {
		uint8_t temp = Result[row * Nb];
		Result[row * Nb] = Result[row * Nb + 1];
		Result[row * Nb + 1] = Result[row * Nb + 2];
		Result[row * Nb + 2] = Result[row * Nb + 3];
		Result[row * Nb + 3] = temp;
	}
}

void ShiftRows(uint8_t Result[]) {
	printf("Before ShiftRows:\n");
	for (int i = 0; i < 16; i++) {
		printf("%X ", Result[i]);
		/*if ((i + 1) % 4 == 0) printf("\n");*/
	}

	ShiftRow(Result, 4, 1, 1);
	ShiftRow(Result, 4, 2, 2);
	ShiftRow(Result, 4, 3, 3);

	printf("\nAfter ShiftRows:\n");
	for (int i = 0; i < 16; i++) {
		printf("%X ", Result[i]);
		/*if ((i + 1) % 4 == 0) printf("\n");*/
	}
}

int Nhan2(uint8_t w) {
	int kq = w << 1;
	if (kq > 256) kq = kq ^ 0x1b;
	kq = kq & 0xFF;
	return kq;
}

int Nhan3(uint8_t w) {
	return Nhan2(w) ^ w;
}

void MixColumns(uint8_t Result[], uint8_t Mix_box[]) {
	uint8_t col[4], i, j, mul_res[4], res[16];
	int res_index = 0, chunk_size = 4;
	for (int j = 0; j < 4; j++) {
		for (int i = 0; i < 4; i++) {
			col[i] = Result[4 * i + j];
		}
		for (int h = 0; h < 16; h += chunk_size)
		{
			for (int k = 0; k < chunk_size; k++)
			{
				if (Mix_box[k+h] == 0x02)
				{
					mul_res[k] = Nhan2(col[k]);
				}
				else if (Mix_box[k+h] == 0x03)
				{
					mul_res[k] = Nhan3(col[k]);
				}
				else
				{
					mul_res[k] = col[k];
				}
			}
			res[res_index] = mul_res[0] ^ mul_res[1] ^ mul_res[2] ^ mul_res[3];
			res_index++;
		}
	}
	res_index = 0;
	for (int l = 0; l <4; l++)
	{
		for (int n = 0; n < 4; n++)
		{
			Result[res_index] = res[4*n + l];
			res_index++;
		}
	}
}

